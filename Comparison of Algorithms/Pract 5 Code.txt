install.packages('rpart')
install.packages('rpart.plot')
install.packages('gmodels')
install.packages('e1071')
library(rpart)
library(rpart.plot)
library(gmodels)
library(e1071)

data(iris)
summary(iris)

#normalize the continuous variables before performing any analysis on the #dataset
temp = as.data.frame(scale(iris[,1:4]))
temp$Species = iris$Species # levels: setosa versicolor virginica
summary(temp)

# Splitting the dataset into the Training set and Test set
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(temp$Species, SplitRatio = 0.75)
train = subset(temp, split == TRUE)
test = subset(temp, split == FALSE)

nrow(train)
nrow(test)

#1. Decision Trees
dt_classifier = rpart(formula = Species ~ .,data = train)

# Predicting the Test set results
dt_y_pred = predict(dt_classifier, newdata = test, type = 'class')
print(dt_y_pred)

# Making the Confusion Matrix for Decision Tree
cm = table(test$Species, dt_y_pred)
print(cm)

#accuracy of DT model
DTaccu = ((12+9+11)/nrow(test))*100 #true positive nos of 3*3 confusion matrix
DTaccu

#2. k-Nearest Neighbours
install.packages("class")
library(class)

cl = train$Species
set.seed(1234)
knn_y_pred = knn(train[,1:4],test[,1:4],cl,k=5)

# cm of k-Nearest Neighbours
cm = table(test$Species, knn_y_pred)
print(cm)

#accuracy of KNN model
KNNaccu = ((12+11+11)/nrow(test))*100 #true positive nos of 3*3 confusion matrix
KNNaccu

#3. Support Vector Machine(SVM)
install.packages('e1071')
library(e1071)

svmclassifier = svm(Species ~ . ,data = train)
svm_y_pred = predict(svmclassifier,newdata = test)

cm = table(test$Species, svm_y_pred)
print(cm)

#accuracy of SVM model
SVMaccu = ((12+11+11)/nrow(test))*100 #true positive nos of 3*3 confusion matrix
SVMaccu

#Decision Tree vs kNN
which(dt_y_pred != knn_y_pred)

#Decision Tree vs SVM
which(dt_y_pred != svm_y_pred)

#svm vs kNN
which(svm_y_pred != knn_y_pred) #both are equal

#Comparison of the accuracy of different models on testing dataset.
models = data.frame(Technique = c("Decision Tree","kNN","SVM"),Accuracy_Percentage = c(88.88889,94.44444,94.44444))
models

